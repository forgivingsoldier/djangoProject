# Generated by Django 4.1.7 on 2023-05-23 09:40

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Comment_for_post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='评论内容')),
                ('like_count', models.IntegerField(default=0, verbose_name='点赞次数')),
                ('report_count', models.IntegerField(default=0, verbose_name='举报次数')),
                ('comment_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='评论时间')),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='user.comment_for_post')),
            ],
            options={
                'verbose_name': 'comment',
                'verbose_name_plural': 'comments',
                'db_table': 'comment_for_post',
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'follow',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.IntegerField(blank=True, null=True)),
                ('username', models.CharField(db_index=True, max_length=255, primary_key=True, serialize=False, unique=True, verbose_name='用户名')),
                ('password', models.CharField(default='123456', max_length=255, verbose_name='密码')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='邮箱')),
                ('nickname', models.CharField(blank=True, max_length=255, verbose_name='昵称')),
                ('role', models.CharField(choices=[('user', '用户'), ('admin', '管理员')], default='user', max_length=20, verbose_name='角色')),
                ('experience', models.IntegerField(default=0, verbose_name='经验值')),
                ('level', models.IntegerField(default=1, verbose_name='等级')),
                ('register_time', models.DateTimeField(auto_now_add=True, verbose_name='注册时间')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='头像')),
                ('signature', models.CharField(blank=True, max_length=255, verbose_name='个性签名')),
                ('telephone', models.CharField(blank=True, default='12345678910', max_length=11, verbose_name='手机号')),
                ('last_login', models.DateTimeField(default=django.utils.timezone.now, verbose_name='最后登录时间')),
                ('is_waring', models.BooleanField(default=False, verbose_name='是否被警告')),
                ('follow', models.ManyToManyField(related_name='followed_by', through='user.Follow', to='user.user')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'user',
            },
        ),
        migrations.CreateModel(
            name='UserWarningNotice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_read', models.BooleanField(default=False, verbose_name='是否已读')),
                ('content', models.TextField(verbose_name='通知内容')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='时间戳')),
                ('user', models.ForeignKey(blank=True, db_column='username', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.user')),
            ],
            options={
                'db_table': 'user_notice',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='资源名称')),
                ('author', models.CharField(max_length=255, verbose_name='作者')),
                ('description', models.TextField(verbose_name='资源描述')),
                ('filetype', models.CharField(default='其他', max_length=255, verbose_name='资源文件分类')),
                ('subject', models.CharField(default='其他', max_length=255, verbose_name='资源学科')),
                ('file', models.FileField(upload_to='resources/', verbose_name='文件')),
                ('file_url', models.URLField(verbose_name='文件链接')),
                ('download_count', models.IntegerField(default=0, verbose_name='下载次数')),
                ('report_count', models.IntegerField(default=0, verbose_name='举报次数')),
                ('upload_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='上传时间')),
                ('user', models.ForeignKey(blank=True, db_column='username', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.user')),
            ],
            options={
                'verbose_name': 'resource',
                'verbose_name_plural': 'resources',
                'db_table': 'resource',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='帖子标题')),
                ('content', models.TextField(verbose_name='帖子内容')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('like_count', models.IntegerField(default=0, verbose_name='点赞次数')),
                ('report_count', models.IntegerField(default=0, verbose_name='举报次数')),
                ('comment_count', models.IntegerField(default=0, verbose_name='评论次数')),
                ('require_level', models.IntegerField(default=1, verbose_name='要求等级')),
                ('user', models.ForeignKey(blank=True, db_column='username', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.user')),
            ],
            options={
                'verbose_name': 'post',
                'verbose_name_plural': 'posts',
                'db_table': 'post',
            },
        ),
        migrations.CreateModel(
            name='LikeNotice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_read', models.BooleanField(default=False, verbose_name='是否已读')),
                ('which_like', models.IntegerField(default=0, verbose_name='点赞类型')),
                ('post_title', models.CharField(default='无', max_length=255, verbose_name='帖子标题')),
                ('resource_title', models.CharField(default='无', max_length=255, verbose_name='资源标题')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='时间戳')),
                ('comment', models.ForeignKey(blank=True, db_column='comment_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.comment_for_post')),
                ('post', models.ForeignKey(blank=True, db_column='post_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.post')),
                ('resource', models.ForeignKey(blank=True, db_column='resource_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.resource')),
                ('user', models.ForeignKey(blank=True, db_column='username', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.user')),
            ],
            options={
                'db_table': 'like_notice',
            },
        ),
        migrations.AddField(
            model_name='follow',
            name='followed_user',
            field=models.ForeignKey(blank=True, db_column='followed_username', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='user.user'),
        ),
        migrations.AddField(
            model_name='follow',
            name='user',
            field=models.ForeignKey(blank=True, db_column='username', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='following', to='user.user'),
        ),
        migrations.CreateModel(
            name='FlavorResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flavor_title', models.TextField(default='无', verbose_name='倾向标题')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='时间戳')),
                ('resource_id', models.ForeignKey(blank=True, db_column='resource_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.resource')),
                ('user', models.ForeignKey(blank=True, db_column='username', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.user')),
            ],
            options={
                'db_table': 'flavor_resource',
            },
        ),
        migrations.CreateModel(
            name='FlavorPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flavor_title', models.TextField(default='无', verbose_name='倾向标题')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='时间戳')),
                ('post_id', models.ForeignKey(blank=True, db_column='post_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.post')),
                ('user', models.ForeignKey(blank=True, db_column='username', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.user')),
            ],
            options={
                'db_table': 'flavor_post',
            },
        ),
        migrations.CreateModel(
            name='ExceptionUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exception_action', models.TextField(verbose_name='异常操作')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='时间戳')),
                ('user', models.ForeignKey(blank=True, db_column='username', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.user')),
            ],
            options={
                'db_table': 'exception_log',
            },
        ),
        migrations.CreateModel(
            name='ExceptionResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exception_reason', models.TextField(default='无', verbose_name='异常原因')),
                ('author', models.ForeignKey(blank=True, db_column='username', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.user')),
                ('source_id', models.ForeignKey(blank=True, db_column='source_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.resource')),
            ],
            options={
                'db_table': 'exception_resource',
            },
        ),
        migrations.CreateModel(
            name='ExceptionPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exception_reason', models.TextField(default='无', verbose_name='异常原因')),
                ('author', models.ForeignKey(blank=True, db_column='username', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.user')),
                ('post_id', models.ForeignKey(blank=True, db_column='post_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.post')),
            ],
            options={
                'db_table': 'exception_post',
            },
        ),
        migrations.CreateModel(
            name='CommentNotice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_read', models.BooleanField(default=False, verbose_name='是否已读')),
                ('which_comment', models.IntegerField(default=0, verbose_name='评论类型')),
                ('post_title', models.CharField(default='无', max_length=255, verbose_name='帖子标题')),
                ('resource_title', models.CharField(default='无', max_length=255, verbose_name='资源标题')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='时间戳')),
                ('comment', models.ForeignKey(blank=True, db_column='comment_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.comment_for_post')),
                ('post', models.ForeignKey(blank=True, db_column='post_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.post')),
                ('resource', models.ForeignKey(blank=True, db_column='resource_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.resource')),
                ('user', models.ForeignKey(blank=True, db_column='username', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.user')),
            ],
            options={
                'db_table': 'comment_notice',
            },
        ),
        migrations.AddField(
            model_name='comment_for_post',
            name='post_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='user.post'),
        ),
        migrations.AddField(
            model_name='comment_for_post',
            name='user',
            field=models.ForeignKey(blank=True, db_column='username', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='user.user'),
        ),
        migrations.CreateModel(
            name='Admin_request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='时间戳')),
                ('user', models.ForeignKey(blank=True, db_column='username', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.user')),
            ],
            options={
                'db_table': 'admin_request',
            },
        ),
    ]
